openapi: 3.0.0
info:
  title: Task Management API - Authentication
  version: 1.0.0
  description: JWT-based authentication endpoints for user registration, login, and token management

servers:
  - url: http://localhost:8000/api
    description: Development server
  - url: https://api.example.com/api
    description: Production server

paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Create a new user account with email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - username
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                  description: Valid email address
                password:
                  type: string
                  format: password
                  minLength: 8
                  maxLength: 128
                  example: SecureP@ssw0rd
                  description: Password meeting complexity requirements
                username:
                  type: string
                  minLength: 3
                  maxLength: 50
                  pattern: '^[a-zA-Z0-9_]+$'
                  example: johndoe
                  description: Unique username (alphanumeric and underscore only)
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User registered successfully
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                        description: JWT access token (15 min expiry)
                      refresh_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                        description: JWT refresh token (7 day expiry)
                      token_type:
                        type: string
                        example: Bearer
                      expires_in:
                        type: integer
                        example: 900
                        description: Access token expiry in seconds
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          description: Invalid input (validation error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                weak_password:
                  value:
                    success: false
                    error: Password must contain uppercase, lowercase, digit, and special character
                invalid_email:
                  value:
                    success: false
                    error: Invalid email format
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error: Email or username already registered

  /auth/login:
    post:
      summary: Login user
      description: Authenticate user and return JWT tokens
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: SecureP@ssw0rd
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Login successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refresh_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      token_type:
                        type: string
                        example: Bearer
                      expires_in:
                        type: integer
                        example: 900
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error: Invalid email or password
        '429':
          description: Too many login attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error: Too many login attempts. Please try again in 15 minutes

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Use refresh token to obtain a new access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Token refreshed successfully
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      token_type:
                        type: string
                        example: Bearer
                      expires_in:
                        type: integer
                        example: 900
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error: Invalid or expired refresh token

  /auth/logout:
    post:
      summary: Logout user
      description: Revoke refresh token and invalidate session
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Logout successful
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/me:
    get:
      summary: Get current user
      description: Retrieve authenticated user's profile
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error: Invalid or expired token

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token for authentication

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        email:
          type: string
          format: email
          example: user@example.com
        username:
          type: string
          example: johndoe
        is_active:
          type: boolean
          example: true
        is_verified:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
          example: 2025-10-08T12:00:00Z
        last_login:
          type: string
          format: date-time
          example: 2025-10-08T15:30:00Z

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: Error message description
        details:
          type: object
          description: Additional error details (optional)
          additionalProperties: true

security:
  - BearerAuth: []
