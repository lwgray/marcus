openapi: 3.0.3
info:
  title: Todo Application API
  description: RESTful API for a modern todo application with user management and task organization
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8000/api/v1
    description: Development server
  - url: https://api.example.com/api/v1
    description: Production server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User profile management
  - name: Todos
    description: Todo item management
  - name: Tags
    description: Tag management
  - name: Statistics
    description: User statistics and analytics

security:
  - BearerAuth: []

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with email and password
      operationId: registerUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and receive JWT tokens
      operationId: loginUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get a new access token using refresh token
      operationId: refreshToken
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
      responses:
        '200':
          description: New access token issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                    example: bearer
                  expires_in:
                    type: integer
                    example: 3600
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Invalidate current access token
      operationId: logoutUser
      responses:
        '204':
          description: Successfully logged out
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Retrieve the authenticated user's profile information
      operationId: getCurrentUser
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

    patch:
      tags:
        - Users
      summary: Update current user profile
      description: Update the authenticated user's profile information
      operationId: updateCurrentUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users/me/password:
    post:
      tags:
        - Users
      summary: Change password
      description: Change the authenticated user's password
      operationId: changePassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
      responses:
        '204':
          description: Password changed successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /todos:
    get:
      tags:
        - Todos
      summary: List todos
      description: Get a paginated list of todos with optional filtering
      operationId: listTodos
      parameters:
        - name: status
          in: query
          description: Filter by status
          schema:
            $ref: '#/components/schemas/TodoStatus'
        - name: priority
          in: query
          description: Filter by priority
          schema:
            $ref: '#/components/schemas/TodoPriority'
        - name: tag
          in: query
          description: Filter by tag name
          schema:
            type: string
        - name: search
          in: query
          description: Search in title and description
          schema:
            type: string
        - name: sort_by
          in: query
          description: Field to sort by
          schema:
            type: string
            enum: [created_at, due_date, priority, title]
            default: created_at
        - name: sort_order
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: List of todos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Todos
      summary: Create todo
      description: Create a new todo item
      operationId: createTodo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoCreate'
      responses:
        '201':
          description: Todo created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /todos/{todo_id}:
    get:
      tags:
        - Todos
      summary: Get todo by ID
      description: Retrieve a specific todo by its ID
      operationId: getTodo
      parameters:
        - $ref: '#/components/parameters/TodoId'
      responses:
        '200':
          description: Todo retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      tags:
        - Todos
      summary: Update todo
      description: Update an existing todo item
      operationId: updateTodo
      parameters:
        - $ref: '#/components/parameters/TodoId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoUpdate'
      responses:
        '200':
          description: Todo updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Todos
      summary: Delete todo
      description: Delete a todo item
      operationId: deleteTodo
      parameters:
        - $ref: '#/components/parameters/TodoId'
      responses:
        '204':
          description: Todo deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /todos/bulk:
    patch:
      tags:
        - Todos
      summary: Bulk update todos
      description: Update multiple todos at once
      operationId: bulkUpdateTodos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoBulkUpdate'
      responses:
        '200':
          description: Todos updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated_count:
                    type: integer
                  todos:
                    type: array
                    items:
                      $ref: '#/components/schemas/Todo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /todos/reorder:
    post:
      tags:
        - Todos
      summary: Reorder todos
      description: Change the order of todos for custom sorting
      operationId: reorderTodos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - todo_ids
              properties:
                todo_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          description: Todos reordered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /tags:
    get:
      tags:
        - Tags
      summary: List tags
      description: Get all tags for the authenticated user
      operationId: listTags
      responses:
        '200':
          description: List of tags
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'
                  total:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Tags
      summary: Create tag
      description: Create a new tag
      operationId: createTag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreate'
      responses:
        '201':
          description: Tag created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'

  /tags/{tag_id}:
    patch:
      tags:
        - Tags
      summary: Update tag
      description: Update an existing tag
      operationId: updateTag
      parameters:
        - name: tag_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagUpdate'
      responses:
        '200':
          description: Tag updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Tags
      summary: Delete tag
      description: Delete a tag (removes from todos but doesn't delete todos)
      operationId: deleteTag
      parameters:
        - name: tag_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Tag deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /stats:
    get:
      tags:
        - Statistics
      summary: Get user statistics
      description: Retrieve statistics about user's todos
      operationId: getUserStats
      responses:
        '200':
          description: User statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStats'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    TodoId:
      name: todo_id
      in: path
      required: true
      description: Todo UUID
      schema:
        type: string
        format: uuid

  schemas:
    TodoStatus:
      type: string
      enum:
        - pending
        - in_progress
        - completed

    TodoPriority:
      type: string
      enum:
        - low
        - medium
        - high
        - urgent

    UserRegistration:
      type: object
      required:
        - email
        - username
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
          example: johndoe
        password:
          type: string
          minLength: 8
          format: password
          example: securePass123
        first_name:
          type: string
          maxLength: 100
          example: John
        last_name:
          type: string
          maxLength: 100
          example: Doe

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: securePass123

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
          example: bearer
        expires_in:
          type: integer
          example: 3600

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
        first_name:
          type: string
          nullable: true
        last_name:
          type: string
          nullable: true
        avatar_url:
          type: string
          format: uri
          nullable: true
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserUpdate:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 100
        last_name:
          type: string
          maxLength: 100
        avatar_url:
          type: string
          format: uri

    PasswordChange:
      type: object
      required:
        - current_password
        - new_password
      properties:
        current_password:
          type: string
          format: password
        new_password:
          type: string
          format: password
          minLength: 8

    TodoCreate:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          example: Complete API design
        description:
          type: string
          maxLength: 2000
          example: Design RESTful API for todo app
        status:
          $ref: '#/components/schemas/TodoStatus'
        priority:
          $ref: '#/components/schemas/TodoPriority'
        due_date:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string

    TodoUpdate:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 2000
        status:
          $ref: '#/components/schemas/TodoStatus'
        priority:
          $ref: '#/components/schemas/TodoPriority'
        due_date:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string

    Todo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/TodoStatus'
        priority:
          $ref: '#/components/schemas/TodoPriority'
        due_date:
          type: string
          format: date-time
          nullable: true
        completed_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        owner_id:
          type: string
          format: uuid
        assigned_to_id:
          type: string
          format: uuid
          nullable: true
        tags:
          type: array
          items:
            type: string
        position:
          type: integer

    TodoListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Todo'
        total:
          type: integer
        page:
          type: integer
        page_size:
          type: integer
        pages:
          type: integer

    TodoBulkUpdate:
      type: object
      required:
        - todo_ids
        - updates
      properties:
        todo_ids:
          type: array
          items:
            type: string
            format: uuid
        updates:
          type: object
          properties:
            status:
              $ref: '#/components/schemas/TodoStatus'
            priority:
              $ref: '#/components/schemas/TodoPriority'

    TagCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
          example: work
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          example: '#FF5733'

    TagUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'

    Tag:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        color:
          type: string
          nullable: true
        user_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time

    UserStats:
      type: object
      properties:
        total_todos:
          type: integer
        completed_todos:
          type: integer
        pending_todos:
          type: integer
        in_progress_todos:
          type: integer
        completion_rate:
          type: number
          format: float
        todos_by_priority:
          type: object
          properties:
            low:
              type: integer
            medium:
              type: integer
            high:
              type: integer
            urgent:
              type: integer
        overdue_todos:
          type: integer
        due_today:
          type: integer
        due_this_week:
          type: integer

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
              additionalProperties: true
            timestamp:
              type: string
              format: date-time
            request_id:
              type: string
              format: uuid

  responses:
    BadRequest:
      description: Invalid input or validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Missing or invalid authentication token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Not authorized to access this resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Conflict:
      description: Resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
