"""
Unit tests for MoveInput model.

This module tests the MoveInput dataclass including validation logic.
"""

from datetime import datetime

import pytest

from src.ttt2.moves.models import MoveInput


@pytest.mark.unit
class TestMoveInput:
    """Test suite for MoveInput dataclass."""

    def test_valid_move_creation_x(self):
        """Test creating valid MoveInput for player X."""
        move = MoveInput(row=1, column=2, player="X")

        assert move.row == 1
        assert move.column == 2
        assert move.player == "X"
        assert isinstance(move.timestamp, str)

    def test_valid_move_creation_o(self):
        """Test creating valid MoveInput for player O."""
        move = MoveInput(row=0, column=0, player="O")

        assert move.row == 0
        assert move.column == 0
        assert move.player == "O"
        assert isinstance(move.timestamp, str)

    def test_timestamp_is_iso_format(self):
        """Test that timestamp is in ISO format."""
        move = MoveInput(row=1, column=2, player="X")
        # Verify it's a valid ISO format by parsing it
        datetime.fromisoformat(move.timestamp)

    def test_timestamp_autogenerated(self):
        """Test that timestamp is automatically generated."""
        before = datetime.now()
        move = MoveInput(row=1, column=2, player="X")
        after = datetime.now()

        move_time = datetime.fromisoformat(move.timestamp)
        # Timestamp should be between before and after
        assert before <= move_time <= after

    def test_all_valid_coordinates(self):
        """Test all valid coordinate combinations (0-2)."""
        for row in range(3):
            for col in range(3):
                move = MoveInput(row=row, column=col, player="X")
                assert move.row == row
                assert move.column == col

    def test_invalid_row_negative(self):
        """Test that negative row raises ValueError."""
        with pytest.raises(ValueError, match="Row must be 0-2, got -1"):
            MoveInput(row=-1, column=2, player="X")

    def test_invalid_row_too_high(self):
        """Test that row > 2 raises ValueError."""
        with pytest.raises(ValueError, match="Row must be 0-2, got 3"):
            MoveInput(row=3, column=2, player="X")

    def test_invalid_row_far_too_high(self):
        """Test that very large row raises ValueError."""
        with pytest.raises(ValueError, match="Row must be 0-2, got 100"):
            MoveInput(row=100, column=2, player="X")

    def test_invalid_column_negative(self):
        """Test that negative column raises ValueError."""
        with pytest.raises(ValueError, match="Column must be 0-2, got -1"):
            MoveInput(row=1, column=-1, player="X")

    def test_invalid_column_too_high(self):
        """Test that column > 2 raises ValueError."""
        with pytest.raises(ValueError, match="Column must be 0-2, got 5"):
            MoveInput(row=1, column=5, player="X")

    def test_invalid_player_empty_string(self):
        """Test that empty string player raises ValueError."""
        with pytest.raises(ValueError, match="Player must be"):
            MoveInput(row=1, column=2, player="")

    def test_invalid_player_lowercase_x(self):
        """Test that lowercase 'x' raises ValueError."""
        with pytest.raises(ValueError, match="Player must be"):
            MoveInput(row=1, column=2, player="x")

    def test_invalid_player_lowercase_o(self):
        """Test that lowercase 'o' raises ValueError."""
        with pytest.raises(ValueError, match="Player must be"):
            MoveInput(row=1, column=2, player="o")

    def test_invalid_player_other_letter(self):
        """Test that other letters raise ValueError."""
        with pytest.raises(ValueError, match="Player must be 'X' or 'O', got Z"):
            MoveInput(row=1, column=2, player="Z")

    def test_both_invalid_row_and_column(self):
        """Test that invalid row is caught first."""
        # Should raise error about row (validated first)
        with pytest.raises(ValueError, match="Row must be 0-2"):
            MoveInput(row=5, column=5, player="X")

    def test_explicit_timestamp(self):
        """Test creating move with explicit timestamp."""
        custom_time = "2025-01-01T12:00:00"
        move = MoveInput(row=1, column=2, player="X", timestamp=custom_time)

        assert move.timestamp == custom_time

    def test_move_equality(self):
        """Test that two moves with same data are equal."""
        timestamp = "2025-01-01T12:00:00"
        move1 = MoveInput(row=1, column=2, player="X", timestamp=timestamp)
        move2 = MoveInput(row=1, column=2, player="X", timestamp=timestamp)

        assert move1 == move2

    def test_move_inequality_different_row(self):
        """Test that moves with different rows are not equal."""
        timestamp = "2025-01-01T12:00:00"
        move1 = MoveInput(row=1, column=2, player="X", timestamp=timestamp)
        move2 = MoveInput(row=0, column=2, player="X", timestamp=timestamp)

        assert move1 != move2

    def test_move_inequality_different_player(self):
        """Test that moves with different players are not equal."""
        timestamp = "2025-01-01T12:00:00"
        move1 = MoveInput(row=1, column=2, player="X", timestamp=timestamp)
        move2 = MoveInput(row=1, column=2, player="O", timestamp=timestamp)

        assert move1 != move2

    def test_move_is_dataclass(self):
        """Test that MoveInput is a dataclass."""
        from dataclasses import is_dataclass

        assert is_dataclass(MoveInput)

    def test_corner_positions(self):
        """Test creating moves at all corner positions."""
        corners = [(0, 0), (0, 2), (2, 0), (2, 2)]
        for row, col in corners:
            move = MoveInput(row=row, column=col, player="X")
            assert move.row == row
            assert move.column == col

    def test_center_position(self):
        """Test creating move at center position."""
        move = MoveInput(row=1, column=1, player="O")
        assert move.row == 1
        assert move.column == 1
